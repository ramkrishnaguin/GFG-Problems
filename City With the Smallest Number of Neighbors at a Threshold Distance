from typing import List
from collections import defaultdict
import heapq
class Solution:
    def findCity(self, n : int, m : int, edges : List[List[int]], distanceThreshold : int) -> int:
        # code here
        adj=defaultdict(list)
        for e in edges:
            adj[e[0]].append([e[1],e[2]])
            adj[e[1]].append([e[0],e[2]])
        
        def dijkstras(s,adj,threshhold):
            dist_count=0
            queue=[]
            visited={}
            for i in adj[s]:
                heapq.heappush(queue,i[::-1])
            visited[s]=True
            while queue:
                q=heapq.heappop(queue)
                if q[1] in visited:
                    continue
                visited[q[1]]=True
                if q[0]>threshhold:
                    return dist_count
                dist_count+=1
                for i in adj[q[1]]:
                    if i[0] not in visited:
                        heapq.heappush(queue,[i[1]+q[0],i[0]])
                
            return dist_count
  
        short_distances=[]
        
        for i in range(n):
            short_distances.append([dijkstras(i,adj,distanceThreshold),i])
            
        short_distances=sorted(short_distances)
        i=0
        while i<len(short_distances)-1:
            if short_distances[i][0]==short_distances[i+1][0]:
                i+=1
            else:
                return short_distances[i][1]
        return short_distances[i][1]
