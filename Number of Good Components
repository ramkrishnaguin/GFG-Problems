class Solution:
    def findNumberOfGoodComponent(self, e : int, v : int, edges : List[List[int]]) -> int:
        from collections import defaultdict
        adj=defaultdict(set)
        for fm,to in edges:
            adj[fm].add(to)
            adj[to].add(fm)
        seen=set()
        constituent=defaultdict(set)
        minimum=defaultdict(lambda:float('inf'))
        def fill(root,cur):
            nonlocal adj,seen,constituent
            if cur in seen:
                return
            constituent[root].add(cur)
            minimum[root]=min(minimum[root],len(adj[cur]))
            seen.add(cur)
            for to in adj[cur]-seen:
                fill(root,to)
        for cur in range(1,v+1):
            fill(cur,cur)
        good=0
        for root in constituent:
            count=len(constituent[root])
            if minimum[root]==count-1:
                good+=1
        return good
